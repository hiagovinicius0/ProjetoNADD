// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoNADD.Data;

namespace ProjetoNADD.Migrations
{
    [DbContext(typeof(ProjetoNADDContext))]
    [Migration("20191022142430_adicionandoUsuarios")]
    partial class adicionandoUsuarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjetoNADD.Models.Area", b =>
                {
                    b.Property<int>("Id_Area")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome_Area");

                    b.HasKey("Id_Area");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Avaliacao", b =>
                {
                    b.Property<int>("Id_Avaliacao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Contextualidade_Avaliacao");

                    b.Property<int>("DisciplinaId");

                    b.Property<bool>("Diversificacao_Avaliacao");

                    b.Property<bool>("EquilibrioValorQuestoes_Avaliacao");

                    b.Property<string>("Nome_Avaliacao");

                    b.Property<int>("NumeroQuestoes_Avaliacao");

                    b.Property<string>("Observacoes_Avaliacao");

                    b.Property<bool>("QuestoesMEeD_Avaliacao");

                    b.Property<bool>("Referencias_Avaliacao");

                    b.Property<bool>("SomatorioQuestoes_Avaliacao");

                    b.Property<bool>("ValorExplicitoProva_Avaliacao");

                    b.Property<bool>("ValorExplicitoQuestoes_Avaliacao");

                    b.Property<double>("ValorProva_Avaliacao");

                    b.HasKey("Id_Avaliacao");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("Avaliacao");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Curso", b =>
                {
                    b.Property<int>("Id_Curso")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId");

                    b.Property<string>("Nome_Curso");

                    b.HasKey("Id_Curso");

                    b.HasIndex("AreaId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Disciplina", b =>
                {
                    b.Property<int>("Id_Disciplina")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano_Disciplina");

                    b.Property<int>("CursoId");

                    b.Property<string>("Nome_Disciplina");

                    b.Property<int>("Periodo_Disciplina");

                    b.HasKey("Id_Disciplina");

                    b.HasIndex("CursoId");

                    b.ToTable("Disciplina");
                });

            modelBuilder.Entity("ProjetoNADD.Models.DisciplinaProfessor", b =>
                {
                    b.Property<int>("Disciplina_id");

                    b.Property<int>("Professor_id");

                    b.Property<int?>("DisciplinaId_Disciplina");

                    b.Property<int?>("ProfessorId_Professor");

                    b.HasKey("Disciplina_id", "Professor_id");

                    b.HasIndex("DisciplinaId_Disciplina");

                    b.HasIndex("ProfessorId_Professor");

                    b.ToTable("DisciplinaProfessor");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Professor", b =>
                {
                    b.Property<int>("Id_Professor")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome_Professor");

                    b.HasKey("Id_Professor");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Questao", b =>
                {
                    b.Property<int>("Id_Questao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Clareza_Questao");

                    b.Property<bool>("Complexidade_Questao");

                    b.Property<bool>("Contextualizacao_Questao");

                    b.Property<int>("Id_Avaliacao");

                    b.Property<int>("Id_Numero");

                    b.Property<string>("Observacoes_Questao");

                    b.HasKey("Id_Questao");

                    b.HasIndex("Id_Avaliacao");

                    b.ToTable("Questao");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Usuario", b =>
                {
                    b.Property<int>("Id_Usuario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login_Usuario")
                        .IsRequired();

                    b.Property<string>("Nome_Usuario")
                        .IsRequired();

                    b.Property<string>("Senha_Usuario")
                        .IsRequired();

                    b.HasKey("Id_Usuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Avaliacao", b =>
                {
                    b.HasOne("ProjetoNADD.Models.Disciplina", "Disciplina")
                        .WithMany("Avaliacao")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoNADD.Models.Curso", b =>
                {
                    b.HasOne("ProjetoNADD.Models.Area", "Area")
                        .WithMany("Cursos")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoNADD.Models.Disciplina", b =>
                {
                    b.HasOne("ProjetoNADD.Models.Curso", "Curso")
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetoNADD.Models.DisciplinaProfessor", b =>
                {
                    b.HasOne("ProjetoNADD.Models.Disciplina")
                        .WithMany("DisciplinaProfessor")
                        .HasForeignKey("DisciplinaId_Disciplina");

                    b.HasOne("ProjetoNADD.Models.Professor")
                        .WithMany("DisciplinaProfessor")
                        .HasForeignKey("ProfessorId_Professor");
                });

            modelBuilder.Entity("ProjetoNADD.Models.Questao", b =>
                {
                    b.HasOne("ProjetoNADD.Models.Avaliacao", "Avaliacao")
                        .WithMany("Questoes")
                        .HasForeignKey("Id_Avaliacao")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
